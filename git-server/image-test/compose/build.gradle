
plugins {
   id 'com.palantir.docker-compose' version '0.34.0'
}


apply from: "$rootProject.projectDir/git-server/project.properties"
apply from: "$rootProject.projectDir/git-server/image/project.properties"
apply from: "$rootProject.projectDir/git-server/image-test/image/project.properties"

// from properties files above:
   def registry = registry_name
   // gitServer_imageName
   // gitServer_imageVersion
   // gitClient_imageName
   // gitClient_imageVersion



dockerCompose {
   dockerComposeFile 'build/docker-compose.yml'
}



tasks.register( 'prepComposeFile' ) {

       delete 'build/'

       delete 'test-deploy/'
       mkdir 'test-deploy/git-server/'

       def projectDir = project(':git-server:image-test:compose').getProjectDir( ).getAbsolutePath( )
       def gitServer_repoPath = projectDir + "/test-deploy/git-server/repo"
       def gitServer_dataPath = projectDir + "/test-deploy/git-server/data"

       def username = System.properties[ 'user.name' ]
       def uid = [ "id", "-u", username ].execute( ).text.trim( )

       copy {
         from 'src/main/docker-compose'
         include '*.yml'
         into 'build/'
         expand( [
                  registry: registry,
                  gitServer_imageName: gitServer_imageName,
                  gitServer_imageVersion: gitServer_imageVersion,
                  gitServer_uid: uid,
                  gitServer_repoPath: gitServer_repoPath,
                  gitServer_dataPath: gitServer_dataPath,
                  gitClient_imageName: gitClient_imageName,
                  gitClient_imageVersion: gitClient_imageVersion
                 ] ) 
       }
}


tasks.register( 'test' ) {

   dependsOn = [
                ':git-server:image:docker',
                ':git-server:image-test:image:docker',
                'prepComposeFile',
                ':git-server:image-test:compose:dockerComposeUp'
               ]

   project.getTasks( ).getByPath( ':git-server:image-test:compose:dockerComposeUp' ).mustRunAfter( ':git-server:image:docker' )
   project.getTasks( ).getByPath( ':git-server:image-test:compose:dockerComposeUp' ).mustRunAfter( ':git-server:image-test:image:docker' )
   project.getTasks( ).getByPath( ':git-server:image-test:compose:dockerComposeUp' ).mustRunAfter( 'prepComposeFile' )


   finalizedBy ':git-server:image-test:compose:dockerComposeDown'


   doLast {

      println "todo-- run tests here"

   }


}



configure( test ) {   
    group = 'git-server'
    description = 'Tests the git-server.  Builds test Docker image (and git-server image, if necessary) and executes tests.'
}


